// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "polysim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace polysim {

namespace {

const ::google::protobuf::Descriptor* SPolymer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPolymer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSim_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_polysim_2eproto() {
  protobuf_AddDesc_polysim_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "polysim.proto");
  GOOGLE_CHECK(file != NULL);
  SPolymer_descriptor_ = file->message_type(0);
  static const int SPolymer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPolymer, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPolymer, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPolymer, z_),
  };
  SPolymer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPolymer_descriptor_,
      SPolymer::default_instance_,
      SPolymer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPolymer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPolymer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPolymer));
  SSystem_descriptor_ = file->message_type(1);
  static const int SSystem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSystem, poly_),
  };
  SSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSystem_descriptor_,
      SSystem::default_instance_,
      SSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSystem));
  SSim_descriptor_ = file->message_type(2);
  static const int SSim_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSim, system_),
  };
  SSim_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSim_descriptor_,
      SSim::default_instance_,
      SSim_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSim, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSim, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSim));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_polysim_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPolymer_descriptor_, &SPolymer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSystem_descriptor_, &SSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSim_descriptor_, &SSim::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_polysim_2eproto() {
  delete SPolymer::default_instance_;
  delete SPolymer_reflection_;
  delete SSystem::default_instance_;
  delete SSystem_reflection_;
  delete SSim::default_instance_;
  delete SSim_reflection_;
}

void protobuf_AddDesc_polysim_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpolysim.proto\022\007polysim\"+\n\010SPolymer\022\t\n\001"
    "x\030\001 \003(\001\022\t\n\001y\030\002 \003(\001\022\t\n\001z\030\003 \003(\001\"*\n\007SSystem"
    "\022\037\n\004poly\030\001 \003(\0132\021.polysim.SPolymer\"(\n\004SSi"
    "m\022 \n\006system\030\001 \003(\0132\020.polysim.SSystem", 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "polysim.proto", &protobuf_RegisterTypes);
  SPolymer::default_instance_ = new SPolymer();
  SSystem::default_instance_ = new SSystem();
  SSim::default_instance_ = new SSim();
  SPolymer::default_instance_->InitAsDefaultInstance();
  SSystem::default_instance_->InitAsDefaultInstance();
  SSim::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_polysim_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_polysim_2eproto {
  StaticDescriptorInitializer_polysim_2eproto() {
    protobuf_AddDesc_polysim_2eproto();
  }
} static_descriptor_initializer_polysim_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SPolymer::kXFieldNumber;
const int SPolymer::kYFieldNumber;
const int SPolymer::kZFieldNumber;
#endif  // !_MSC_VER

SPolymer::SPolymer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPolymer::InitAsDefaultInstance() {
}

SPolymer::SPolymer(const SPolymer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPolymer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPolymer::~SPolymer() {
  SharedDtor();
}

void SPolymer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPolymer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPolymer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPolymer_descriptor_;
}

const SPolymer& SPolymer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_polysim_2eproto();  return *default_instance_;
}

SPolymer* SPolymer::default_instance_ = NULL;

SPolymer* SPolymer::New() const {
  return new SPolymer;
}

void SPolymer::Clear() {
  x_.Clear();
  y_.Clear();
  z_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPolymer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_x;
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // repeated double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // repeated double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPolymer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->x(i), output);
  }
  
  // repeated double y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->y(i), output);
  }
  
  // repeated double z = 3;
  for (int i = 0; i < this->z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->z(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPolymer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->x(i), target);
  }
  
  // repeated double y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->y(i), target);
  }
  
  // repeated double z = 3;
  for (int i = 0; i < this->z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->z(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPolymer::ByteSize() const {
  int total_size = 0;
  
  // repeated double x = 1;
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }
  
  // repeated double y = 2;
  {
    int data_size = 0;
    data_size = 8 * this->y_size();
    total_size += 1 * this->y_size() + data_size;
  }
  
  // repeated double z = 3;
  {
    int data_size = 0;
    data_size = 8 * this->z_size();
    total_size += 1 * this->z_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPolymer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPolymer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPolymer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPolymer::MergeFrom(const SPolymer& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPolymer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPolymer::CopyFrom(const SPolymer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPolymer::IsInitialized() const {
  
  return true;
}

void SPolymer::Swap(SPolymer* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    z_.Swap(&other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPolymer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPolymer_descriptor_;
  metadata.reflection = SPolymer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSystem::kPolyFieldNumber;
#endif  // !_MSC_VER

SSystem::SSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSystem::InitAsDefaultInstance() {
}

SSystem::SSystem(const SSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSystem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSystem::~SSystem() {
  SharedDtor();
}

void SSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSystem_descriptor_;
}

const SSystem& SSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_polysim_2eproto();  return *default_instance_;
}

SSystem* SSystem::default_instance_ = NULL;

SSystem* SSystem::New() const {
  return new SSystem;
}

void SSystem::Clear() {
  poly_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .polysim.SPolymer poly = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poly:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poly()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_poly;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .polysim.SPolymer poly = 1;
  for (int i = 0; i < this->poly_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->poly(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .polysim.SPolymer poly = 1;
  for (int i = 0; i < this->poly_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->poly(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSystem::ByteSize() const {
  int total_size = 0;
  
  // repeated .polysim.SPolymer poly = 1;
  total_size += 1 * this->poly_size();
  for (int i = 0; i < this->poly_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poly(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSystem::MergeFrom(const SSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  poly_.MergeFrom(from.poly_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSystem::CopyFrom(const SSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSystem::IsInitialized() const {
  
  return true;
}

void SSystem::Swap(SSystem* other) {
  if (other != this) {
    poly_.Swap(&other->poly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSystem_descriptor_;
  metadata.reflection = SSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSim::kSystemFieldNumber;
#endif  // !_MSC_VER

SSim::SSim()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSim::InitAsDefaultInstance() {
}

SSim::SSim(const SSim& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSim::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSim::~SSim() {
  SharedDtor();
}

void SSim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSim_descriptor_;
}

const SSim& SSim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_polysim_2eproto();  return *default_instance_;
}

SSim* SSim::default_instance_ = NULL;

SSim* SSim::New() const {
  return new SSim;
}

void SSim::Clear() {
  system_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .polysim.SSystem system = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_system;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .polysim.SSystem system = 1;
  for (int i = 0; i < this->system_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->system(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .polysim.SSystem system = 1;
  for (int i = 0; i < this->system_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->system(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSim::ByteSize() const {
  int total_size = 0;
  
  // repeated .polysim.SSystem system = 1;
  total_size += 1 * this->system_size();
  for (int i = 0; i < this->system_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->system(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSim::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSim* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSim*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSim::MergeFrom(const SSim& from) {
  GOOGLE_CHECK_NE(&from, this);
  system_.MergeFrom(from.system_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSim::CopyFrom(const SSim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSim::IsInitialized() const {
  
  return true;
}

void SSim::Swap(SSim* other) {
  if (other != this) {
    system_.Swap(&other->system_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSim_descriptor_;
  metadata.reflection = SSim_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace polysim

// @@protoc_insertion_point(global_scope)
